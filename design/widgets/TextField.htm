<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML xmlns="http://www.w3.org/1999/xhtml">
<HEAD>
<TITLE>Aurora</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<LINK media=all href="..//main.css" type=text/css rel=stylesheet>
<BODY>
<DIV id=main>
<DIV id=header>
<DIV id=header-inner>Aurora</DIV></DIV>
<DIV id=container>
<DIV id=container-inner>
<TABLE borderColor=#cbcbcb cellSpacing=0 cellPadding=2 border=1>
  <TBODY>
  <TR>
    <TD vAlign=top>类的描述: 文本框<BR>&nbsp;所在模块: 
      <I>aurora</I><BR>&nbsp;示例程序: <BR>&nbsp;快速跳到: <A 
      href="#parameter">参数表</A>&nbsp;&nbsp;<A 
      href="#property">属性表</A>&nbsp;&nbsp;<A 
      href="#method">方法表</A>&nbsp;&nbsp;<A 
      href="#event">事件表</A>
  </TD>
  </TR>
  </TBODY>
</TABLE>
<TABLE borderColor=#cbcbcb cellSpacing=0 cellPadding=2 border=1>
  <TBODY>
  <TR>
    <TH>XML配置</TH></TR>
  <TR>
    <TD vAlign=top>
      
	 </TD>
  </TR>
  </TBODY>
</TABLE>

<A name=#parameter></A>
<TABLE borderColor=#cbcbcb cellSpacing=0 cellPadding=2 border=1>
  <TBODY>
  <TR>
    <TH colSpan=2>参数表</TH>
  </TR>
  </TBODY>
</TABLE>

<A name=#property></A>
<TABLE borderColor=#cbcbcb cellSpacing=0 cellPadding=2 border=1>
  <TBODY>
  <TR>
    <TH colSpan=2>属性表</TH></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>version</SPAN><BR>&nbsp;<SPAN class=description>当前 Ucren 
      的版本号</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>appPath</SPAN><BR>&nbsp;<SPAN class=description>Ucren 
      的当前目录</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>currentSkin</SPAN><BR>&nbsp;<SPAN 
      class=description>返回当前皮肤名称</SPAN></TD></TR></TBODY></TABLE><A name=#method></A>
<TABLE borderColor=#cbcbcb cellSpacing=0 cellPadding=2 border=1>
  <TBODY>
  <TR>
    <TH colSpan=2>方法表</TH></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>apply(<SPAN class=functionParams>originalObject, newObject, 
      except</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>拷贝其它对象的所有属性，返回拷贝后的对象</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>originalObject:</SPAN>&nbsp; 原对象，也是结果对象<BR><SPAN 
      class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>newObject:</SPAN>&nbsp; 被拷贝属性的对象<BR><SPAN 
      class=type>&lt;object&gt;</SPAN> <SPAN class=property>except:</SPAN>&nbsp; 
      如果属性名称存在于 except 中，则忽略<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>id()</SPAN><BR>&nbsp;<SPAN 
      class=description>产生一个唯一标识字符串</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>extend(<SPAN class=functionParams>class, 
      prototype</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>对一个类或系统对象进行扩展，返回类的引用</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>class:</SPAN>&nbsp; 被扩展的类或系统对象的名称<BR><SPAN 
      class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>prototype:</SPAN>&nbsp; 包含属性或方法的一个 object 对象，这些属性或方法将被扩展到 
      class 上<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>nameSpace(<SPAN 
      class=functionParams>name</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>创建一个名字空间</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>name:</SPAN>&nbsp; 带句号分隔开的字符串，将作为名字空间，如 
      "Ucren.example.data"<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN class=property>Import(<SPAN 
      class=functionParams>classpath, callback</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>异步加载一个类</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>classpath:</SPAN>&nbsp; 类的路径（以句点分隔开）<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback:</SPAN>&nbsp; 类加载完成后的回调函数<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN class=property>each(<SPAN 
      class=functionParams>obj, fn</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>遍历一个对象，将其所有属性和值逐个发送给一回调函数</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 遍历的对象，如: { a: 0, b: 1, c: 2 }<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN class=property>fn:</SPAN>&nbsp; 
      回调函数，如: function(name, value){ alert([name, value]); }<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>clone(<SPAN 
      class=functionParams>obj</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>深度克隆对象，返回克隆后的对象</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object/array&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 被克隆的对象或数组<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN class=property>clear(<SPAN 
      class=functionParams>obj</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>去除对象的所有属性</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 对象引用<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;UObject/dom&gt;</SPAN> <SPAN 
      class=property>get(<SPAN class=functionParams>nodeInfo, 
      returnDom</SPAN>)</SPAN><BR>&nbsp;<SPAN class=description>根据 nodeInfo 产生一 
      UObject 对象</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string/dom/UObject&gt;</SPAN> 
      <SPAN class=property>nodeInfo:</SPAN>&nbsp; 节点的 id、dom 引用或者 UObject 
      对象<BR><SPAN class=type>&lt;boolean&gt;</SPAN> <SPAN 
      class=property>returnDom:</SPAN>&nbsp; 此参数决定方法返回值类型，为 true 时，直接返回 dom 对象，为 
      false 返回 UObject<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;event&gt;</SPAN> <SPAN class=property>Event(<SPAN 
      class=functionParams>e</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>返回当前 event 对象，用于事件函数当中</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>addEvent(<SPAN class=functionParams>obj, evt, 
      fun</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>添加事件监听，并返回新的事件函数的引用</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 被监听的对象<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN class=property>evt:</SPAN>&nbsp; 
      事件名称，注意，这里不需要前导"on"，只需后面的名称，如 "mousedown"<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN class=property>fun:</SPAN>&nbsp; 
      事件函数<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>deleteEvent(<SPAN class=functionParams>obj, evt, 
      fun</SPAN>)</SPAN><BR>&nbsp;<SPAN class=description>移除事件监听</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 被监听的对象<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN class=property>evt:</SPAN>&nbsp; 
      事件名称<BR><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>fun:</SPAN>&nbsp; 事件函数，注意，此处的事件函数必须是 addEvent 
      的返回值。<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN class=property>Listen(<SPAN 
      class=functionParams>fun1, fun2</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>旁观者监听，当条件函数返回值为 true 时，触发事件函数</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>fun1:</SPAN>&nbsp; 条件函数<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN class=property>fun2:</SPAN>&nbsp; 
      事件函数<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>onTouch(<SPAN class=functionParams>obj, methodName, 
      callback, beforeMethod</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>监听指定对象的指定方法的调用</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 被监听的对象<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>methodName:</SPAN>&nbsp; 方法名称<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback:</SPAN>&nbsp; 当被监听的对象的指定方法被调用时触发<BR><SPAN 
      class=type>&lt;boolean&gt;</SPAN> <SPAN 
      class=property>beforeMethod:</SPAN>&nbsp; 该参数指定 callback 
      是否在被监听对象的方法被调用之前触发，缺少为 false<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string/false&gt;</SPAN> <SPAN 
      class=property>type(<SPAN 
      class=functionParams>o</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>测试输入的类型，详见 examples/type.html</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;all&gt;</SPAN> <SPAN 
      class=property>o:</SPAN>&nbsp; 任意类型的数据<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>queryString(<SPAN class=functionParams>queryName, 
      sourceString</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>从源字符串中取得传值</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>queryName:</SPAN>&nbsp; 传值变量名称<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>sourceString:</SPAN>&nbsp; 源字符串，缺少为 
    location.href<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>getLocationHash()</SPAN><BR>&nbsp;<SPAN 
      class=description>取得当前页面地址的 hash 值</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;number&gt;</SPAN> <SPAN 
      class=property>randomNumber(<SPAN 
      class=functionParams>num</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>生成一个大于等于 0 且小于 num 的随机整数</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;number&gt;</SPAN> <SPAN 
      class=property>num:</SPAN>&nbsp; 一个大于等于 0 的整数<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>randomWord(<SPAN class=functionParams>length, 
      sourceString</SPAN>)</SPAN><BR>&nbsp;<SPAN 
class=description>生成随机字符串</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;number&gt;</SPAN> <SPAN 
      class=property>length:</SPAN>&nbsp; 结果字符串的长度<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>sourceString:</SPAN>&nbsp; 限定结果字符串中的字符只能存在于 
      sourceString，缺省为所有的数字和字符<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;obj&gt;</SPAN> <SPAN class=property>decode(<SPAN 
      class=functionParams>str</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>将格式化的字符串反序列化成json对象( 如要使用 encode 操作，请先 import data.JSON; 
      )</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>str:</SPAN>&nbsp; 需要转换的字符串<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>loadingImage(<SPAN class=functionParams>imagePathArray, 
      callback, onloading</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>预载图片</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;array&gt;</SPAN> <SPAN 
      class=property>imagePathArray:</SPAN>&nbsp; 图片地址数组<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback:</SPAN>&nbsp; 回调函数，加载所有图片完成后触发<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>onloading:</SPAN>&nbsp; 回调函数，加载一张图片完成后触发<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>onReady(<SPAN 
      class=functionParams>fun</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>等待文档载入完毕之后触发函数 fun</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>fun:</SPAN>&nbsp; 文档载入完毕之后触发的函数<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>blind()</SPAN><BR>&nbsp;<SPAN 
      class=description>创建一个半透明的蒙层，如 Ucren.alert() 
所产生的那种在对话框背面的半透明层</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>unblind()</SPAN><BR>&nbsp;<SPAN 
      class=description>取消半透明的蒙层</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>showLoading(<SPAN 
      class=functionParams>msg</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>显示 loading 的提示层，msg 为所要提示的文本</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>msg:</SPAN>&nbsp; 提示的文本<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>hideLoading()</SPAN><BR>&nbsp;<SPAN class=description>隐藏 
      loading 的提示层</SPAN></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN class=property>alert(<SPAN 
      class=functionParams>context, title, 
      callback</SPAN>)</SPAN><BR>&nbsp;<SPAN class=description>弹出一确定对话框</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>context:</SPAN>&nbsp; 对话框的内容文本<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN class=property>title:</SPAN>&nbsp; 
      对话框的标题文本<BR><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback:</SPAN>&nbsp; 当点击对话框的确定按钮时触发该函数<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>confirm(<SPAN class=functionParams>context, title, 
      callback</SPAN>)</SPAN><BR>&nbsp;<SPAN class=description>弹出一确定取消对话框</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>context:</SPAN>&nbsp; 对话框的内容文本<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN class=property>title:</SPAN>&nbsp; 
      对话框的标题文本<BR><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback(n):</SPAN>&nbsp; 当点击对话框的确定或取消按钮时触发该函数，传递参数 n，点确定时 
      n=true<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN class=property>prompt(<SPAN 
      class=functionParams>context, title, defaultValue, 
      callback</SPAN>)</SPAN><BR>&nbsp;<SPAN 
class=description>弹出一带输入框的对话框</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>context:</SPAN>&nbsp; 对话框的内容文本<BR><SPAN 
      class=type>&lt;string&gt;</SPAN> <SPAN class=property>title:</SPAN>&nbsp; 
      对话框的标题文本<BR><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>defaultValue:</SPAN>&nbsp; 输入框的初始值<BR><SPAN 
      class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback(v):</SPAN>&nbsp; 回调函数，当关闭对话框时触发，传递参数 
      v，即输入框的值<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>encode(<SPAN 
      class=functionParams>obj</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>将一个 js 对象序列化为字符串(import data.JSON;)</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>obj:</SPAN>&nbsp; 需要被序列化的 js 对象<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;object&gt;</SPAN> <SPAN 
      class=property>decode(<SPAN 
      class=functionParams>str</SPAN>)</SPAN><BR>&nbsp;<SPAN 
      class=description>将字符串反序列化为js对象</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>str:</SPAN>&nbsp; 一个 js 对象的字符串序列<BR></DIV></TD></TR>
  <TR>
    <TD width=150>&nbsp;</TD>
    <TD><SPAN class=type>&lt;none&gt;</SPAN> <SPAN 
      class=property>remoteCallScript(<SPAN class=functionParams>url, asy, 
      callback</SPAN>)</SPAN><BR>&nbsp;<SPAN class=description>后期加载脚本(import 
      net.Ajax)</SPAN>
      <DIV class=paramDetail><SPAN class=type>&lt;string&gt;</SPAN> <SPAN 
      class=property>url:</SPAN>&nbsp; 脚本文件的地址<BR><SPAN 
      class=type>&lt;boolean&gt;</SPAN> <SPAN class=property>asy:</SPAN>&nbsp; 
      是否采用异步的方式加载<BR><SPAN class=type>&lt;function&gt;</SPAN> <SPAN 
      class=property>callback:</SPAN>&nbsp; 回调函数，如果 asy 为 
      true，则加载执行脚本完成后触发<BR></DIV></TD></TR></TBODY></TABLE><A name=#event></A>
<TABLE borderColor=#cbcbcb cellSpacing=0 cellPadding=2 border=1>
  <TBODY>
  <TR>
    <TH colSpan=2>事件表</TH></TR></TBODY></TABLE></DIV></DIV>
<DIV id=footer>©Aurora Team</DIV></DIV></BODY></HTML>
